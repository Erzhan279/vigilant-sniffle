from flask import Flask, request
import requests, json, os, threading, time
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

app = Flask(__name__)

# === üîê –¢–æ–∫–µ–Ω–¥–µ—Ä –º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä ===
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
CHANNEL_LINK = "https://t.me/+3gQIXD-xl1Q0YzY6"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"

# === Google Drive –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ ===
GOOGLE_CREDENTIALS_FILE = "google_client_secret.json"  # ‚úÖ “õ—ã—Å“õ–∞—Ä—Ç—ã–ª“ì–∞–Ω –∞—Ç–∞—É
FOLDER_ID = "14iPNSmNbq5r_7w8PqFHN-FSwFx838PKz"

# === Telegram –∂”ô–Ω–µ Gemini ===
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

MEMORY_FILE = "channel_memory.json"
INFO_FILE = "channel_info.json"
ADMIN_ID = 1815036801  # üëà –¢–µ–∫ –æ—Å—ã ID /files –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–∞–¥—ã


# === üß© Google Drive Service ===
def get_drive_service():
    creds = Credentials.from_authorized_user_file(
        GOOGLE_CREDENTIALS_FILE, ["https://www.googleapis.com/auth/drive.file"]
    )
    return build("drive", "v3", credentials=creds)


def find_file_on_drive(filename):
    service = get_drive_service()
    results = service.files().list(
        q=f"name='{filename}' and '{FOLDER_ID}' in parents and trashed=false",
        spaces="drive",
        fields="files(id, name, modifiedTime)"
    ).execute()
    files = results.get("files", [])
    return files[0] if files else None


def upload_or_replace_drive_file(filename):
    try:
        service = get_drive_service()
        file_info = find_file_on_drive(filename)
        media = MediaFileUpload(filename, mimetype="application/json")
        if file_info:
            service.files().update(fileId=file_info["id"], media_body=media).execute()
            print(f"‚ôªÔ∏è Drive —Ñ–∞–π–ª—ã –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã: {filename}")
        else:
            file_metadata = {"name": filename, "parents": [FOLDER_ID]}
            service.files().create(body=file_metadata, media_body=media, fields="id").execute()
            print(f"‚úÖ Drive-“õ–∞ –∂–∞“£–∞ —Ñ–∞–π–ª –∂“Ø–∫—Ç–µ–ª–¥—ñ: {filename}")
    except Exception as e:
        print(f"‚ùå Drive “õ–∞—Ç–µ—Å—ñ: {e}")


# === üß† JSON —Å–∞“õ—Ç–∞—É ===
def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    upload_or_replace_drive_file(filename)


def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


# === üì° –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É ===
def get_channel_posts(limit=50):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        response = requests.get(url).json()
        posts = []
        if "result" in response:
            for update in response["result"]:
                msg = update.get("channel_post")
                if msg and str(msg["chat"]["id"]) == CHANNEL_ID:
                    text = msg.get("text", "")
                    if text:
                        posts.append(text)
        posts = posts[-limit:]
        save_json(MEMORY_FILE, posts)
        print(f"‚úÖ {len(posts)} –ø–æ—Å—Ç —Å–∞“õ—Ç–∞–ª–¥—ã –∂”ô–Ω–µ Drive-“õ–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
        return posts
    except Exception as e:
        print("‚ùå “ö–∞—Ç–µ (–∫–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É):", e)
        return []


# === üìñ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç ===
def save_channel_info():
    info = {
        "name": "Qazaqsha Films üé¨",
        "description": "“ö–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂–¥–∞–ª“ì–∞–Ω –µ“£ –∂–∞“£–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –º–µ–Ω —Å–µ—Ä–∏–∞–ª–¥–∞—Ä. üî•",
        "link": CHANNEL_LINK,
        "id": CHANNEL_ID,
        "language": "kk",
        "topic": "–§–∏–ª—å–º–¥–µ—Ä –º–µ–Ω “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ ”ô–ª–µ–º—ñ"
    }
    save_json(INFO_FILE, info)
    print("‚úÖ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Å–∞“õ—Ç–∞–ª–¥—ã –∂”ô–Ω–µ Drive-“õ–∞ –∫”©—à—ñ—Ä—ñ–ª–¥—ñ.")


# === üîÅ 3 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω –∂–∞“£–∞—Ä—Ç—É ===
def update_channel_data():
    while True:
        print("‚ôªÔ∏è –ö–∞–Ω–∞–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∂–∞“£–∞—Ä—Ç—É...")
        get_channel_posts()
        save_channel_info()
        time.sleep(3 * 60 * 60)


# === Gemini API ===
def ask_gemini(prompt):
    data = {
        "contents": [{"parts": [{"text": f"–°–µ–Ω Qazaqsha Films Telegram –∞—Ä–Ω–∞—Å—ã–Ω—ã“£ –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ“£. "
                                     f"–¢–µ–∫ —Å–æ–ª –∞—Ä–Ω–∞ –∂–∞–π–ª—ã –∂–∞—É–∞–ø –±–µ—Ä. –ê—Ä–Ω–∞–¥–∞ “õ–∞–∑–∞“õ—à–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –±–∞—Ä. "
                                     f"–ú—ñ–Ω–µ —Å–æ“£“ì—ã 50 –ø–æ—Å—Ç: {load_json(MEMORY_FILE)}. "
                                     f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {prompt}"}]}]
    }
    r = requests.post(
        GEMINI_URL,
        headers={"Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY},
        json=data
    )
    if r.status_code == 200:
        try:
            js = r.json()
            return js["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "‚ö†Ô∏è Gemini –∂–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–ª–¥–∞–π –∞–ª–º–∞–¥—ã."
    else:
        return f"‚ö†Ô∏è Gemini “õ–∞—Ç–µ—Å—ñ: {r.text}"


# === Telegram —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã ===
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)


# === üåê Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"
    msg = update["message"]
    chat_id = msg["chat"]["id"]
    text = msg.get("text", "").strip()

    if text.lower() == "/files":
        if chat_id != ADMIN_ID:
            send_message(chat_id, "‚ö†Ô∏è –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")
            return "ok"
        service = get_drive_service()
        results = service.files().list(
            q=f"'{FOLDER_ID}' in parents and trashed=false",
            fields="files(name, modifiedTime, webViewLink)"
        ).execute()
        files = results.get("files", [])
        if not files:
            send_message(chat_id, "üìÇ Drive-—Ç–∞ —Ñ–∞–π–ª —Ç–∞–±—ã–ª–º–∞–¥—ã üòÖ")
        else:
            msg_text = "üìÇ <b>Google Drive-—Ç–∞“ì—ã —Ñ–∞–π–ª–¥–∞—Ä:</b>\n\n"
            for f in files:
                msg_text += f"üî∏ <a href='{f['webViewLink']}'>{f['name']}</a>\nüïì {f['modifiedTime']}\n\n"
            send_message(chat_id, msg_text)
        return "ok"

    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ú–∞“ì–∞–Ω “õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω"],
            ["üÜï –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ", "üî• –¢–Ü–†–ö–ï–õ–£ üî•"]
        ]
        send_message(chat_id, "üé¨ Qazaqsha Films ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!", buttons)
        return "ok"

    if "–¢–Ü–†–ö–ï–õ–£" in text:
        send_message(chat_id, f'üì∫ <b>–ë—ñ–∑–¥—ñ“£ –∞—Ä–Ω–∞:</b>\nüëâ <a href="{CHANNEL_LINK}">Qazaqsha Films</a>')
        return "ok"

    if "–ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω" in text:
        posts = load_json(MEMORY_FILE)
        latest = "\n\n".join(posts[-5:]) if posts else "”ò–∑—ñ—Ä–≥–µ –∂–∞“£–∞ –∫–∏–Ω–æ –∂–æ“õ üòÖ"
        send_message(chat_id, f"üÜï <b>–°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä:</b>\n\n{latest}")
        return "ok"

    posts = load_json(MEMORY_FILE)
    found = [m for m in posts if text.lower() in m.lower()]
    if found:
        send_message(chat_id, "üîé –¢–∞–±—ã–ª“ì–∞–Ω –∫–∏–Ω–æ–ª–∞—Ä:\n\n" + "\n\n".join(found[:5]))
    else:
        send_message(chat_id, f"üéû {ask_gemini(text)}")
    return "ok"


@app.route("/")
def home():
    return "üé¨ Qazaqsha Films –±–æ—Ç Google Drive-–ø–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"


if __name__ == "__main__":
    save_channel_info()
    get_channel_posts()
    threading.Thread(target=update_channel_data, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)