from flask import Flask, request
import requests, json, os, threading, time
import firebase_admin
from firebase_admin import credentials, db

app = Flask(__name__)

# === üîê Telegram –∂”ô–Ω–µ Gemini ===
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
CHANNEL_LINK = "https://t.me/+3gQIXD-xl1Q0YzY6"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

ADMIN_ID = 1815036801  # –¢–µ–∫ –∞–¥–º–∏–Ω “Ø—à—ñ–Ω /files –∫–æ–º–∞–Ω–¥–∞—Å—ã

# === üî• Firebase –±–∞–ø—Ç–∞—É ===
cred_json = json.loads(os.environ["FIREBASE_CREDENTIALS"])
cred = credentials.Certificate(cred_json)
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://kinobot-fe2ac-default-rtdb.firebaseio.com/"
})

# === üß† Firebase –µ—Å—Ç–µ —Å–∞“õ—Ç–∞—É —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ===
def save_to_firebase(path, data):
    try:
        db.reference(path).set(data)
        print(f"‚úÖ Firebase —Å–∞“õ—Ç–∞–ª–¥—ã: {path}")
    except Exception as e:
        print(f"‚ùå Firebase “õ–∞—Ç–µ—Å—ñ: {e}")

def load_from_firebase(path):
    try:
        data = db.reference(path).get()
        return data if data else []
    except Exception as e:
        print(f"‚ùå Firebase –æ“õ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        return []

# === üì° –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É ===
def get_channel_posts(limit=50):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        response = requests.get(url).json()
        posts = []

        if "result" in response:
            for update in response["result"]:
                msg = update.get("channel_post")
                if msg and str(msg["chat"]["id"]) == CHANNEL_ID:
                    text = msg.get("text", "")
                    if text:
                        posts.append(text)

        posts = posts[-limit:]
        save_to_firebase("channel_memory", posts)
        print(f"‚úÖ {len(posts)} –ø–æ—Å—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞–ª–¥—ã.")
        return posts
    except Exception as e:
        print("‚ùå “ö–∞—Ç–µ (–∫–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É):", e)
        return []

# === üìñ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Å–∞“õ—Ç–∞—É ===
def save_channel_info():
    info = {
        "name": "Qazaqsha Films üé¨",
        "description": "“ö–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂–¥–∞–ª“ì–∞–Ω –µ“£ –∂–∞“£–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –º–µ–Ω —Å–µ—Ä–∏–∞–ª–¥–∞—Ä. üî•",
        "link": CHANNEL_LINK,
        "id": CHANNEL_ID,
        "language": "kk",
        "topic": "–§–∏–ª—å–º–¥–µ—Ä –º–µ–Ω “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ ”ô–ª–µ–º—ñ"
    }
    save_to_firebase("channel_info", info)
    print("‚úÖ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞–ª–¥—ã.")

# === üîÅ 3 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω –∂–∞“£–∞—Ä—Ç—É ===
def update_channel_data():
    while True:
        print("‚ôªÔ∏è –ö–∞–Ω–∞–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∂–∞“£–∞—Ä—Ç—É...")
        get_channel_posts()
        save_channel_info()
        time.sleep(3 * 60 * 60)

# === ü§ñ Gemini API ===
def ask_gemini(prompt):
    info = load_from_firebase("channel_info")
    posts = load_from_firebase("channel_memory")

    data = {
        "contents": [{
            "parts": [{
                "text": f"–°–µ–Ω Qazaqsha Films Telegram –∞—Ä–Ω–∞—Å—ã–Ω—ã“£ –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ“£. "
                        f"–¢–µ–∫ —Å–æ–ª –∞—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∂–∞—É–∞–ø –±–µ—Ä. –ê—Ä–Ω–∞–¥–∞ “õ–∞–∑–∞“õ—à–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –±–∞—Ä. "
                        f"–ú—ñ–Ω–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã: {info}. "
                        f"–ú—ñ–Ω–µ —Å–æ“£“ì—ã –ø–æ—Å—Ç—Ç–∞—Ä: {posts}. "
                        f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {prompt}"
            }]
        }]
    }

    r = requests.post(
        GEMINI_URL,
        headers={"Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY},
        json=data
    )

    if r.status_code == 200:
        try:
            js = r.json()
            return js["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "‚ö†Ô∏è Gemini –∂–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–ª–¥–∞–π –∞–ª–º–∞–¥—ã."
    else:
        return f"‚ö†Ô∏è Gemini “õ–∞—Ç–µ—Å—ñ: {r.text}"

# === üì§ Telegram —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É ===
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# === üåê Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"

    msg = update["message"]
    chat_id = msg["chat"]["id"]
    text = msg.get("text", "").strip()

    # üîπ –¢–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω
    if text.lower() == "/files":
        if chat_id != ADMIN_ID:
            send_message(chat_id, "‚ö†Ô∏è –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")
            return "ok"

        info = load_from_firebase("channel_info")
        posts = load_from_firebase("channel_memory")
        msg_text = (
            "üìÇ <b>Firebase –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ:</b>\n\n"
            f"üìò –ê—Ä–Ω–∞: {info.get('name', '‚Äî')}\n"
            f"üìÑ –°–∞“õ—Ç–∞–ª“ì–∞–Ω –ø–æ—Å—Ç —Å–∞–Ω—ã: {len(posts)}"
        )
        send_message(chat_id, msg_text)
        return "ok"

    # /start
    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ú–∞“ì–∞–Ω “õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω"],
            ["üÜï –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ", "üî• –¢–Ü–†–ö–ï–õ–£ üî•"]
        ]
        send_message(chat_id, "üé¨ Qazaqsha Films ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!", buttons)
        return "ok"

    # –¢–Ü–†–ö–ï–õ–£
    if "–¢–Ü–†–ö–ï–õ–£" in text:
        send_message(chat_id, f'üì∫ –ë—ñ–∑–¥—ñ“£ –∞—Ä–Ω–∞: <a href="{CHANNEL_LINK}">Qazaqsha Films</a>')
        return "ok"

    # –°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä
    if "–ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω" in text:
        posts = load_from_firebase("channel_memory")
        latest = "\n\n".join(posts[-5:]) if posts else "”ò–∑—ñ—Ä–≥–µ –∂–∞“£–∞ –∫–∏–Ω–æ –∂–æ“õ üòÖ"
        send_message(chat_id, f"üÜï <b>–°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä:</b>\n\n{latest}")
        return "ok"

    # –ö–∏–Ω–æ —ñ–∑–¥–µ—É
    posts = load_from_firebase("channel_memory")
    found = [m for m in posts if text.lower() in m.lower()]

    if found:
        send_message(chat_id, "üîé –¢–∞–±—ã–ª“ì–∞–Ω –∫–∏–Ω–æ–ª–∞—Ä:\n\n" + "\n\n".join(found[:5]))
    else:
        send_message(chat_id, f"üéû {ask_gemini(text)}")
    return "ok"

@app.route("/")
def home():
    return "üé¨ Qazaqsha Films –±–æ—Ç Firebase-–ø–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"

if __name__ == "__main__":
    save_channel_info()
    get_channel_posts()
    threading.Thread(target=update_channel_data, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)