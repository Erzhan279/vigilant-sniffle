from flask import Flask, request
import requests
import json
import os
import threading
import time

app = Flask(__name__)

# === üîê –¢–æ–∫–µ–Ω–¥–µ—Ä –º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä ===
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
CHANNEL_LINK = "https://t.me/+3gQIXD-xl1Q0YzY6"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"

TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

MEMORY_FILE = "channel_memory.json"
INFO_FILE = "channel_info.json"

# === üß† –ï—Å—Ç–µ —Å–∞“õ—Ç–∞—É —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ===
def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# === üì° –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É ===
def get_channel_posts(limit=50):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        response = requests.get(url).json()
        posts = []

        if "result" in response:
            for update in response["result"]:
                msg = update.get("channel_post")
                if msg and str(msg["chat"]["id"]) == CHANNEL_ID:
                    text = msg.get("text", "")
                    if text:
                        posts.append(text)

        posts = posts[-limit:]
        save_json(MEMORY_FILE, posts)
        print(f"‚úÖ {len(posts)} –ø–æ—Å—Ç —Å–∞“õ—Ç–∞–ª–¥—ã ({MEMORY_FILE})")
        return posts
    except Exception as e:
        print("‚ùå “ö–∞—Ç–µ (–∫–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É):", e)
        return []

# === üìñ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Å–∞“õ—Ç–∞—É ===
def save_channel_info():
    info = {
        "name": "Qazaqsha Films üé¨",
        "description": "“ö–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂–¥–∞–ª“ì–∞–Ω –µ“£ –∂–∞“£–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –º–µ–Ω —Å–µ—Ä–∏–∞–ª–¥–∞—Ä. üî•\n–ö“Ø–Ω —Å–∞–π—ã–Ω –∂–∞“£–∞ –∫–∏–Ω–æ!",
        "link": CHANNEL_LINK,
        "id": CHANNEL_ID,
        "language": "kk",
        "topic": "–§–∏–ª—å–º–¥–µ—Ä –º–µ–Ω “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ ”ô–ª–µ–º—ñ"
    }
    save_json(INFO_FILE, info)
    print("‚úÖ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Å–∞“õ—Ç–∞–ª–¥—ã (channel_info.json)")

# === üîÅ 3 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω –∂–∞“£–∞—Ä—Ç—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã ===
def update_channel_data():
    while True:
        print("‚ôªÔ∏è –ö–∞–Ω–∞–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∂–∞“£–∞—Ä—Ç—É...")
        get_channel_posts()
        save_channel_info()
        time.sleep(3 * 60 * 60)  # 3 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω

# === ü§ñ Gemini API –∂–∞—É–∞–ø ===
def ask_gemini(prompt):
    data = {
        "contents": [{"parts": [{"text": f"–°–µ–Ω Qazaqsha Films Telegram –∞—Ä–Ω–∞—Å—ã–Ω—ã“£ –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ“£. "
                                     f"–¢–µ–∫ —Å–æ–ª –∞—Ä–Ω–∞ –∂–∞–π–ª—ã –∂–∞—É–∞–ø –±–µ—Ä. –ê—Ä–Ω–∞–¥–∞ “õ–∞–∑–∞“õ—à–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –±–∞—Ä. "
                                     f"–ú—ñ–Ω–µ –æ–Ω—ã“£ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã: {load_json(INFO_FILE)}. "
                                     f"–ú—ñ–Ω–µ —Å–æ“£“ì—ã 50 –ø–æ—Å—Ç: {load_json(MEMORY_FILE)}. "
                                     f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {prompt}"}]}]
    }
    r = requests.post(
        GEMINI_URL,
        headers={
            "Content-Type": "application/json",
            "X-goog-api-key": GEMINI_API_KEY
        },
        json=data
    )
    if r.status_code == 200:
        try:
            js = r.json()
            return js["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "‚ö†Ô∏è Gemini –∂–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–ª–¥–∞–π –∞–ª–º–∞–¥—ã."
    else:
        return f"‚ö†Ô∏è Gemini “õ–∞—Ç–µ—Å—ñ: {r.text}"

# === üì§ Telegram-“ì–∞ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É ===
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# === üåê Telegram Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"

    message = update["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    # /start
    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ú–∞“ì–∞–Ω “õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω"],
            ["üÜï –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ", "üî• –¢–Ü–†–ö–ï–õ–£ üî•"]
        ]
        welcome = (
            "üé¨ <b>Qazaqsha Films</b> ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!\n\n"
            "–ú“±–Ω–¥–∞ –µ“£ –∂–∞“£–∞ –∂”ô–Ω–µ —Å–∞–ø–∞–ª—ã “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ–ª–∞—Äüî•\n\n"
            "–¢”©–º–µ–Ω–Ω–µ–Ω —Ç–∞“£–¥–∞ ‚§µÔ∏è"
        )
        send_message(chat_id, welcome, buttons)
        return "ok"

    # üî• –¢–Ü–†–ö–ï–õ–£
    if "–¢–Ü–†–ö–ï–õ–£" in text:
        send_message(chat_id, f'üì∫ <b>–ë—ñ–∑–¥—ñ“£ –∞—Ä–Ω–∞:</b>\nüëâ <a href="{CHANNEL_LINK}">Qazaqsha Films</a>')
        return "ok"

    # üÜï –°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä
    if "–ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω" in text:
        posts = load_json(MEMORY_FILE)
        latest = "\n\n".join(posts[-5:]) if posts else "”ò–∑—ñ—Ä–≥–µ –∂–∞“£–∞ –∫–∏–Ω–æ –∂–æ“õ üòÖ"
        send_message(chat_id, f"üÜï <b>–°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä:</b>\n\n{latest}")
        return "ok"

    # üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É
    if "–ö–∏–Ω–æ —ñ–∑–¥–µ—É" in text:
        send_message(chat_id, "üîç “ö–∞–π –∫–∏–Ω–æ–¥—ã —ñ–∑–¥–µ–π—Å—ñ“£? –ê—Ç—ã–Ω –∂–∞–∑ üëá")
        return "ok"

    # üß† “∞—Å—ã–Ω—ã—Å
    if "“õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω" in text.lower():
        send_message(chat_id, "üé≠ “ö–∞–π –∂–∞–Ω—Ä “±–Ω–∞–π–¥—ã? (–¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è, —ç–∫—à–Ω —Ç.–±.)")
        return "ok"

    # üé¨ –Ü–∑–¥–µ—É
    posts = load_json(MEMORY_FILE)
    found = [m for m in posts if text.lower() in m.lower()]
    if found:
        movie_list = "\n\n".join([f"üé¨ <b>{m}</b>" for m in found[:5]])
        send_message(chat_id, f"üîé –¢–∞–±—ã–ª“ì–∞–Ω –∫–∏–Ω–æ–ª–∞—Ä:\n\n{movie_list}")
    else:
        gemini_reply = ask_gemini(text)
        send_message(chat_id, f"üéû {gemini_reply}")

    return "ok"

# === üè† –ë–∞—Å—Ç—ã –±–µ—Ç ===
@app.route("/")
def home():
    return "üé¨ Qazaqsha Films –±–æ—Ç –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"

# === üöÄ –°–µ—Ä–≤–µ—Ä–¥—ñ —ñ—Å–∫–µ “õ–æ—Å—É ===
if __name__ == "__main__":
    save_channel_info()
    get_channel_posts()
    threading.Thread(target=update_channel_data, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)