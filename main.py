from flask import Flask, request
import requests
import os

app = Flask(__name__)

# === üîê –¢–æ–∫–µ–Ω–¥–µ—Ä ===
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"   # ‚Üê –º“±–Ω–¥–∞ ”©–∑—ñ“£–Ω—ñ“£ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä“ì–∞–Ω Gemini API Key “õ–æ–π

# === üîó Telegram API URL ===
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

# === üß† Gemini API (2.0-flash) ===
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

# =========================================================
# Telegram-“ì–∞ –∂–∞—É–∞–ø –∂—ñ–±–µ—Ä—É
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# Gemini-–¥–µ–Ω –∂–∞—É–∞–ø –∞–ª—É
def ask_gemini(prompt):
    data = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    r = requests.post(
        GEMINI_URL,
        headers={
            "Content-Type": "application/json",
            "X-goog-api-key": GEMINI_API_KEY
        },
        json=data
    )
    if r.status_code == 200:
        js = r.json()
        try:
            return js["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "“ö–∞—Ç–µ: Gemini –∂–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º üòÖ"
    else:
        return f"Gemini “õ–∞—Ç–µ—Å—ñ: {r.text}"

# =========================================================
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"
    message = update["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    # /start
    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ú–∞“ì–∞–Ω “õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω"],
            ["üÜï –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ", "üì∫ –ö–∞–Ω–∞–ª“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É"]
        ]
        welcome = (
            "üé¨ <b>Qazaqsha Films</b> ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!\n\n"
            "–ú“±–Ω–¥–∞ –µ“£ –∂–∞“£–∞ –∂”ô–Ω–µ —Å–∞–ø–∞–ª—ã “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ–ª–∞—Äüî•\n"
            "–¢”©–º–µ–Ω–Ω–µ–Ω —Ç–∞“£–¥–∞ ‚§µÔ∏è"
        )
        send_message(chat_id, welcome, buttons)
        return "ok"

    # –ö–∞–Ω–∞–ª“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É
    if "–ö–∞–Ω–∞–ª“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É" in text:
        send_message(chat_id, "üì∫ –ö–∞–Ω–∞–ª—ã–º—ã–∑“ì–∞ –∂–∞–∑—ã–ª:\nüëâ https://t.me/+3gQIXD-xl1Q0YzY6")
        return "ok"

    # –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ
    if "–ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω" in text:
        send_message(chat_id, "üé¨ –°–æ“£“ì—ã –∂“Ø–∫—Ç–µ–º–µ–ª–µ—Ä:")
        return "ok"

    # –ö–∏–Ω–æ —ñ–∑–¥–µ—É
    if "–ö–∏–Ω–æ —ñ–∑–¥–µ—É" in text:
        send_message(chat_id, "üîç “ö–∞–π –∫–∏–Ω–æ–¥—ã —ñ–∑–¥–µ–π—Å—ñ“£? –ê—Ç—ã–Ω –∂–∞–∑ üëá")
        return "ok"

    # “∞—Å—ã–Ω—ã—Å
    if "“õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω" in text.lower():
        send_message(chat_id, "üß† “ö–∞–π –∂–∞–Ω—Ä “±–Ω–∞–π–¥—ã? (–¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è, —ç–∫—à–Ω —Ç.–±.)")
        return "ok"

    # –ë–∞—Å“õ–∞ –∫–µ–∑ –∫–µ–ª–≥–µ–Ω –º”ô—Ç—ñ–Ω ‚Üí Gemini –∂”ô–Ω–µ —ñ–∑–¥–µ—É
    gemini_reply = ask_gemini(f"'{text}' –¥–µ–≥–µ–Ω –∫–∏–Ω–æ–Ω—ã —ñ–∑–¥–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω. "
                              f"“ö–∞–∑–∞“õ—à–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –∫–∞–Ω–∞–ª—ã–º–¥–∞ —Å–æ–ª —Ñ–∏–ª—å–º –±–∞—Ä –º–∞ –∂”ô–Ω–µ “±“õ—Å–∞—Å –∞—Ç–∞—É–ª–∞—Ä “õ–∞–Ω–¥–∞–π?")
    send_message(chat_id, f"üéû {gemini_reply}")
    return "ok"

# =========================================================
@app.route("/")
def home():
    return "Qazaqsha Films bot is running! ‚úÖ"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)