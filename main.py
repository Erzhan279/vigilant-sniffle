from flask import Flask, request
import requests, json, os, threading, time
import firebase_admin
from firebase_admin import credentials, db

# === üöÄ Flask “õ–æ—Å—ã–º—à–∞—Å—ã ===
app = Flask(__name__)

# === üîê –ë–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ ===
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
CHANNEL_LINK = "https://t.me/+3gQIXD-xl1Q0YzY6"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"
ADMIN_ID = 1815036801  # –°–µ–Ω—ñ“£ Telegram ID-—ñ“£

# === üî• Firebase –±–∞–ø—Ç–∞—É—ã ===
import os
import json
import firebase_admin
from firebase_admin import credentials, db

# üîê FIREBASE_CREDENTIALS –º”ô–Ω—ñ–Ω Render Environment Variables —ñ—à—ñ–Ω–µ —Å–∞–ª—ã–ø “õ–æ—é –∫–µ—Ä–µ–∫
firebase_config = json.loads(os.environ["FIREBASE_CREDENTIALS"])

cred = credentials.Certificate(firebase_config)
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://kinobot-fe2ac-default-rtdb.firebaseio.com/"
})

# === üì¶ Firebase —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä ===
INFO_REF = db.reference("channel_info")
MEMORY_REF = db.reference("channel_memory")

# === üåç API —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä ===
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"


# === üì§ Telegram —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É ===
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)


# === üì° –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É –∂”ô–Ω–µ Firebase-–∫–µ —Å–∞“õ—Ç–∞—É ===
def get_channel_posts(limit=50):
    print("üì° –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ—É –±–∞—Å—Ç–∞–ª–¥—ã...")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    response = requests.get(url).json()
    posts = []

    if "result" in response:
        for update in response["result"]:
            msg = update.get("channel_post")
            if msg and str(msg["chat"]["id"]) == CHANNEL_ID:
                text = msg.get("text", "")
                if text:
                    posts.append(text)

    posts = posts[-limit:]
    if posts:
        MEMORY_REF.set(posts)
        print(f"‚úÖ {len(posts)} –ø–æ—Å—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞–ª–¥—ã.")
    else:
        print("‚ö†Ô∏è –ü–æ—Å—Ç —Ç–∞–±—ã–ª“ì–∞–Ω –∂–æ“õ.")
    return posts


# === üìñ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞—É ===
def save_channel_info():
    info = {
        "name": "Qazaqsha Films üé¨",
        "description": "“ö–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂–¥–∞–ª“ì–∞–Ω –µ“£ –∂–∞“£–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –º–µ–Ω —Å–µ—Ä–∏–∞–ª–¥–∞—Ä. üî•",
        "link": CHANNEL_LINK,
        "id": CHANNEL_ID,
        "language": "kk",
        "topic": "–§–∏–ª—å–º–¥–µ—Ä –º–µ–Ω “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ ”ô–ª–µ–º—ñ"
    }
    INFO_REF.set(info)
    print("‚úÖ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞–ª–¥—ã.")


# === üîÅ ”ò—Ä 3 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ–ø —Ç“±—Ä—É ===
def auto_refresh():
    while True:
        posts = MEMORY_REF.get()
        if not posts:
            print("‚ôªÔ∏è Firebase –±–æ—Å, –ø–æ—Å—Ç—Ç–∞—Ä–¥—ã “õ–∞–π—Ç–∞ –∂“Ø–∫—Ç–µ–π–º—ñ–Ω...")
            get_channel_posts()
            save_channel_info()
        else:
            print("‚úÖ –ü–æ—Å—Ç—Ç–∞—Ä –±–∞—Ä, “õ–∞–π—Ç–∞ –∂“Ø–∫—Ç–µ—É “õ–∞–∂–µ—Ç –µ–º–µ—Å.")
        time.sleep(3 * 60 * 60)


# === ü§ñ Gemini Firebase –∞—Ä“õ—ã–ª—ã –∂–∞—É–∞–ø –±–µ—Ä—É ===
def ask_gemini(prompt):
    posts = MEMORY_REF.get() or []
    info = INFO_REF.get() or {}

    context = (
        f"–°–µ–Ω Qazaqsha Films Telegram –∞—Ä–Ω–∞—Å—ã–Ω—ã“£ –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ“£. "
        f"–ê—Ä–Ω–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã: {info.get('description', '')}. "
        f"–ú—ñ–Ω–µ —Å–æ“£“ì—ã 50 –ø–æ—Å—Ç:\n\n" + "\n".join(posts[-50:]) +
        f"\n\n–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {prompt}"
    )

    data = {"contents": [{"parts": [{"text": context}]}]}
    r = requests.post(
        GEMINI_URL,
        headers={"Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY},
        json=data
    )

    try:
        js = r.json()
        return js["candidates"][0]["content"]["parts"][0]["text"]
    except Exception:
        return "‚ö†Ô∏è Gemini Firebase –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω–µ —Å“Ø–π–µ–Ω–µ –∞–ª–º–∞–¥—ã."


# === üåê Telegram Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"

    msg = update["message"]
    chat_id = msg["chat"]["id"]
    text = msg.get("text", "").strip()

    # üîí –ê–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä
    if chat_id == ADMIN_ID:
        if text.lower() == "/files":
            info = INFO_REF.get()
            posts = MEMORY_REF.get()
            send_message(chat_id,
                         f"üìä –ê—Ä–Ω–∞: {info.get('name')}\n"
                         f"üóÇ –ü–æ—Å—Ç —Å–∞–Ω—ã: {len(posts) if posts else 0}\n"
                         f"üåê Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–¥–∞–ª“ì–∞–Ω ‚úÖ")
            return "ok"

        if text.lower() == "/gostart":
            posts = MEMORY_REF.get()
            if posts:
                send_message(chat_id, "‚ôªÔ∏è –°–æ“£“ì—ã –ø–æ—Å—Ç—Ç–∞—Ä –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä, “õ–∞–π—Ç–∞ –∂“Ø–∫—Ç–µ–ª–º–µ–π–¥—ñ.")
            else:
                get_channel_posts()
                save_channel_info()
                send_message(chat_id, "‚úÖ –°–æ“£“ì—ã 50 –ø–æ—Å—Ç Firebase-–∫–µ –∂“Ø–∫—Ç–µ–ª–¥—ñ!")
            return "ok"

    # üè† –°—Ç–∞—Ä—Ç
    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ö–∏–Ω–æ “±—Å—ã–Ω—ã—Å—ã"],
            ["üÜï –ñ–∞“£–∞ –∫–∏–Ω–æ–ª–∞—Ä", "üî• –¢–Ü–†–ö–ï–õ–£ üî•"]
        ]
        send_message(chat_id,
                     "üé¨ <b>Qazaqsha Films</b> ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!\n\n"
                     "–ú“±–Ω–¥–∞ –µ“£ –∂–∞“£–∞ –∂”ô–Ω–µ —Å–∞–ø–∞–ª—ã “õ–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂–¥–∞–ª“ì–∞–Ω —Ñ–∏–ª—å–º–¥–µ—Ä! üçø", buttons)
        return "ok"

    # üî• –¢–Ü–†–ö–ï–õ–£ –±–∞—Ç—ã—Ä–º–∞—Å—ã
    if "–¢–Ü–†–ö–ï–õ–£" in text:
        send_message(chat_id, f'üì∫ –ë—ñ–∑–¥—ñ“£ –∞—Ä–Ω–∞: <a href="{CHANNEL_LINK}">Qazaqsha Films</a>')
        return "ok"

    # üÜï –°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä
    if "–ñ–∞“£–∞ –∫–∏–Ω–æ–ª–∞—Ä" in text:
        posts = MEMORY_REF.get()
        latest = "\n\n".join(posts[-5:]) if posts else "”ò–∑—ñ—Ä–≥–µ –∂–∞“£–∞ –∫–∏–Ω–æ –∂–æ“õ üòÖ"
        send_message(chat_id, f"üÜï <b>–°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä:</b>\n\n{latest}")
        return "ok"

    # üîç –Ü–∑–¥–µ—É
    if "–ö–∏–Ω–æ —ñ–∑–¥–µ—É" in text:
        send_message(chat_id, "üîç “ö–∞–π –∫–∏–Ω–æ–¥—ã —ñ–∑–¥–µ–ø –∂–∞—Ç—ã—Ä—Å—ã“£? –ê—Ç—ã–Ω –∂–∞–∑ üëá")
        return "ok"

    # üé≠ “∞—Å—ã–Ω—ã—Å
    if "“∞—Å—ã–Ω—ã—Å" in text:
        send_message(chat_id, "üé≠ “ö–∞–π –∂–∞–Ω—Ä “±–Ω–∞–π–¥—ã? (–¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è, —ç–∫—à–Ω, “õ–æ—Ä“õ—ã–Ω—ã—à—Ç—ã —Ç.–±.)")
        return "ok"

    # üîé –Ü–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ—Å—ñ
    posts = MEMORY_REF.get() or []
    found = [m for m in posts if text.lower() in m.lower()]
    if found:
        send_message(chat_id, "üéû –¢–∞–±—ã–ª“ì–∞–Ω –∫–∏–Ω–æ–ª–∞—Ä:\n\n" + "\n\n".join(found[:5]))
    else:
        send_message(chat_id, ask_gemini(text))

    return "ok"


@app.route("/")
def home():
    return "üé¨ Qazaqsha Films –±–æ—Ç Firebase –∂”ô–Ω–µ Gemini-–ø–µ–Ω —Ç–æ–ª—ã“õ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"


# === üöÄ –Ü—Å–∫–µ “õ–æ—Å—É ===
if __name__ == "__main__":
    threading.Thread(target=auto_refresh, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)