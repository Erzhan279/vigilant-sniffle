from flask import Flask, request
import requests, os, json, threading, time
import firebase_admin
from firebase_admin import credentials, db

app = Flask(__name__)

# === üîê –ù–µ–≥—ñ–∑–≥—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä ===
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
CHANNEL_LINK = "https://t.me/+3gQIXD-xl1Q0YzY6"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"

# === Firebase –æ—Ä–Ω–∞—Ç—É ===
cred = credentials.Certificate("firebase_credentials.json")  # ‚Üê —Å–µ–Ω—ñ“£ Firebase service account JSON —Ñ–∞–π–ª—ã“£
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://kinobot-fe2ac-default-rtdb.firebaseio.com/"
})

# === Telegram –∂”ô–Ω–µ Gemini URL ===
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

# === üß† –ë–æ—Ç—Ç—ã“£ —ñ—à–∫—ñ –ø–∞–º—è—Ç—ã ===
memory = []

# ============================================================
# üìÇ Firebase —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã
def save_to_firebase(path, data):
    ref = db.reference(path)
    ref.set(data)

def load_from_firebase(path):
    ref = db.reference(path)
    return ref.get() or {}

# ============================================================
# üé¨ –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É
def get_channel_posts(limit=50):
    print("üîÑ –ö–∞–Ω–∞–ª–¥–∞–Ω –ø–æ—Å—Ç—Ç–∞—Ä –∞–ª—ã–Ω—ã–ø –∂–∞—Ç—ã—Ä...")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    try:
        response = requests.get(url).json()
        posts = []
        if "result" in response:
            for update in response["result"]:
                msg = update.get("channel_post")
                if msg and str(msg["chat"]["id"]) == CHANNEL_ID:
                    text = msg.get("text", "")
                    if text:
                        posts.append(text)
        posts = posts[-limit:]
        save_to_firebase("channel_posts", posts)
        print(f"‚úÖ {len(posts)} –ø–æ—Å—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞–ª–¥—ã.")
        return posts
    except Exception as e:
        print(f"‚ùå “ö–∞—Ç–µ (–∫–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É): {e}")
        return []

# ============================================================
# üßæ –ö–∞–Ω–∞–ª —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç
def save_channel_info():
    info = {
        "name": "üé¨ Qazaqsha Films",
        "description": "“ö–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂–¥–∞–ª“ì–∞–Ω —Ñ–∏–ª—å–º–¥–µ—Ä –º–µ–Ω —Å–µ—Ä–∏–∞–ª–¥–∞—Ä–¥—ã“£ –æ—Ä—Ç–∞–ª—ã“ì—ã! üî•",
        "link": CHANNEL_LINK,
        "topic": "“ö–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ ”ô–ª–µ–º—ñ üá∞üáø",
        "language": "kk"
    }
    save_to_firebase("channel_info", info)
    print("‚úÖ –ê—Ä–Ω–∞ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç Firebase-–∫–µ —Å–∞“õ—Ç–∞–ª–¥—ã.")

# ============================================================
# ‚ôªÔ∏è –ê–≤—Ç–æ–∂–∞“£–∞—Ä—Ç—É (3 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω)
def update_channel_data():
    while True:
        get_channel_posts()
        save_channel_info()
        time.sleep(3 * 60 * 60)

# ============================================================
# üß† Gemini –∂–∞—É–∞–ø
def ask_gemini(prompt):
    channel_info = load_from_firebase("channel_info")
    channel_posts = load_from_firebase("channel_posts")

    context = f"""
    –°–µ–Ω Qazaqsha Films Telegram –∞—Ä–Ω–∞—Å—ã–Ω—ã“£ —Ä–µ—Å–º–∏ –∫”©–º–µ–∫—à—ñ—Å—ñ—Å—ñ“£ üé¨
    –ê—Ä–Ω–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã: {json.dumps(channel_info, ensure_ascii=False)}
    –°–æ“£“ì—ã —Ñ–∏–ª—å–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ: {channel_posts}
    –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {prompt}
    –¢–µ–∫ –æ—Å—ã –∞—Ä–Ω–∞ –∂–∞–π–ª—ã –∂–∞—É–∞–ø –±–µ—Ä, —Å—ã—Ä—Ç“õ—ã —Ç–∞“õ—ã—Ä—ã–ø“õ–∞ –∫–µ—Ç–ø–µ.
    """

    data = {"contents": [{"parts": [{"text": context}]}]}
    r = requests.post(
        GEMINI_URL,
        headers={"Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY},
        json=data
    )

    if r.status_code == 200:
        try:
            answer = r.json()["candidates"][0]["content"]["parts"][0]["text"]
            memory.append({"q": prompt, "a": answer})  # ‚è∫ –ï—Å—Ç–µ —Å–∞“õ—Ç–∞—É
            if len(memory) > 10:  # –¢–µ–∫ —Å–æ“£“ì—ã 10 ”ô“£–≥—ñ–º–µ–Ω—ñ “±—Å—Ç–∞–π–¥—ã
                memory.pop(0)
            save_to_firebase("bot_memory", memory)
            return answer
        except Exception:
            return "‚ö†Ô∏è Gemini –∂–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–ª–¥–∞–π –∞–ª–º–∞–¥—ã."
    else:
        return f"‚ö†Ô∏è Gemini “õ–∞—Ç–µ—Å—ñ: {r.text}"

# ============================================================
# üì§ Telegram —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# ============================================================
# üåê Webhook (–±–æ—Ç –ª–æ–≥–∏–∫–∞—Å—ã)
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"

    message = update["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ö–∏–Ω–æ “±—Å—ã–Ω—ã—Å—ã"],
            ["üÜï –°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä", "üî• –¢—ñ—Ä–∫–µ–ª—É"]
        ]
        welcome = (
            "üé¨ <b>Qazaqsha Films</b> ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!\n\n"
            "–ú“±–Ω–¥–∞ –µ“£ –∂–∞“£–∞ “õ–∞–∑–∞“õ—à–∞ —Ñ–∏–ª—å–º–¥–µ—Ä –º–µ–Ω —Å–µ—Ä–∏–∞–ª–¥–∞—Äüî•\n\n"
            "“ö–∞–π—Ç–∞ –æ—Ä–∞–ª“ì–∞–Ω –∫–∏–Ω–æ ”ô–ª–µ–º—ñ ‚Äî —Ç–µ–∫ –±—ñ–∑–¥–µ!\n\n"
            "–¢”©–º–µ–Ω–Ω–µ–Ω —Ç–∞“£–¥–∞ ‚§µÔ∏è"
        )
        send_message(chat_id, welcome, buttons)
        return "ok"

    if "–¢—ñ—Ä–∫–µ–ª—É" in text:
        send_message(chat_id, f'üì∫ <b>–ë—ñ–∑–¥—ñ“£ –∞—Ä–Ω–∞:</b>\nüëâ <a href="{CHANNEL_LINK}">Qazaqsha Films</a>')
        return "ok"

    if "–°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä" in text:
        posts = load_from_firebase("channel_posts")
        if posts:
            latest = "\n\n".join(posts[-5:])
            send_message(chat_id, f"üÜï <b>–°–æ“£“ì—ã –∂“Ø–∫—Ç–µ–º–µ–ª–µ—Ä:</b>\n\n{latest}")
        else:
            send_message(chat_id, "üòÖ –ê—Ä–Ω–∞–¥–∞ ”ô–∑—ñ—Ä–≥–µ –∂–∞“£–∞ –∫–∏–Ω–æ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return "ok"

    if "–ö–∏–Ω–æ —ñ–∑–¥–µ—É" in text:
        send_message(chat_id, "üîé “ö–∞–π –∫–∏–Ω–æ–Ω—ã —ñ–∑–¥–µ–π—Å—ñ“£? –ê—Ç—ã–Ω –∂–∞–∑ üëá")
        return "ok"

    if "–ö–∏–Ω–æ “±—Å—ã–Ω—ã—Å—ã" in text:
        send_message(chat_id, "üé≠ “ö–∞–π –∂–∞–Ω—Ä “±–Ω–∞–π–¥—ã? (–∫–æ–º–µ–¥–∏—è, –¥—Ä–∞–º–∞, —ç–∫—à–Ω —Ç.–±.)")
        return "ok"

    # üé¨ –ö–∏–Ω–æ —ñ–∑–¥–µ—É –ª–æ–≥–∏–∫–∞—Å—ã
    posts = load_from_firebase("channel_posts")
    found = [m for m in posts if text.lower() in m.lower()]
    if found:
        send_message(chat_id, "üîé –¢–∞–±—ã–ª“ì–∞–Ω –∫–∏–Ω–æ–ª–∞—Ä:\n\n" + "\n\n".join(found[:5]))
    else:
        send_message(chat_id, f"üéû {ask_gemini(text)}")

    return "ok"

# ============================================================
@app.route("/")
def home():
    return "üé¨ Qazaqsha Films –±–æ—Ç Firebase-–ø–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"

# ============================================================
if __name__ == "__main__":
    save_channel_info()
    get_channel_posts()
    threading.Thread(target=update_channel_data, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)