from flask import Flask, request
import requests
import os

app = Flask(__name__)

# üîê –¢–æ–∫–µ–Ω–¥–µ—Ä –º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä
BOT_TOKEN = "6947421569:AAGCqkNTN6AhlgZLHW6Q_B0ild7TMnf03so"
CHANNEL_ID = "-1002948354799"
GEMINI_API_KEY = "AIzaSyAbCKTuPXUoCZ26l0bEQc0qXAIJa5d7Zlk"  # ‚úÖ –°–µ–Ω—ñ“£ –∂“±–º—ã—Å —ñ—Å—Ç–µ–π—Ç—ñ–Ω Gemini –∫—ñ–ª—Ç—ñ“£
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

# =========================================================
# üì§ Telegram-“ì–∞ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É
def send_message(chat_id, text, buttons=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if buttons:
        payload["reply_markup"] = {"keyboard": buttons, "resize_keyboard": True}
    requests.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# =========================================================
# ü§ñ Gemini API –∞—Ä“õ—ã–ª—ã –∂–∞—É–∞–ø –∞–ª—É
def ask_gemini(prompt):
    data = {"contents": [{"parts": [{"text": prompt}]}]}
    r = requests.post(
        GEMINI_URL,
        headers={
            "Content-Type": "application/json",
            "X-goog-api-key": GEMINI_API_KEY
        },
        json=data
    )
    if r.status_code == 200:
        try:
            js = r.json()
            return js["candidates"][0]["content"]["parts"][0]["text"]
        except Exception:
            return "‚ö†Ô∏è Gemini –∂–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã–Ω —Ç–∞–ª–¥–∞–π –∞–ª–º–∞–¥—ã."
    else:
        return f"‚ö†Ô∏è Gemini “õ–∞—Ç–µ—Å—ñ: {r.text}"

# =========================================================
# üé¨ –ö–∞–Ω–∞–ª–¥–∞“ì—ã —Å–æ“£“ì—ã 200 –ø–æ—Å—Ç—Ç—ã –∞–ª—É
def get_channel_posts(limit=200):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    try:
        response = requests.get(url).json()
        posts = []
        if "result" in response:
            for update in response["result"]:
                msg = update.get("channel_post")
                if msg and str(msg["chat"]["id"]) == CHANNEL_ID:
                    text = msg.get("text", "")
                    if text:
                        posts.append(text)
        posts = posts[-limit:]
        print(f"‚úÖ –ö–∞–Ω–∞–ª–¥–∞–Ω {len(posts)} –ø–æ—Å—Ç –∞–ª—ã–Ω–¥—ã.")
        return posts
    except Exception as e:
        print("‚ùå “ö–∞—Ç–µ (–∫–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –∞–ª—É):", e)
        return []

# –ö–∞–Ω–∞–ª –ø–æ—Å—Ç—Ç–∞—Ä—ã–Ω –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª“ì–∞–Ω–¥–∞ –±—ñ—Ä —Ä–µ—Ç –∞–ª–∞–º—ã–∑
CHANNEL_POSTS = get_channel_posts()

# =========================================================
# üåê Telegram Webhook
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return "no update"

    message = update["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    # /start
    if text.lower() == "/start":
        buttons = [
            ["üîç –ö–∏–Ω–æ —ñ–∑–¥–µ—É", "üß† –ú–∞“ì–∞–Ω “õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω"],
            ["üÜï –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ", "üî• –¢–Ü–†–ö–ï–õ–£ üî•"]
        ]
        welcome = (
            "üé¨ <b>Qazaqsha Films</b> ”ô–ª–µ–º—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£!\n\n"
            "–ú“±–Ω–¥–∞ –µ“£ –∂–∞“£–∞ –∂”ô–Ω–µ —Å–∞–ø–∞–ª—ã “õ–∞–∑–∞“õ—à–∞ –∫–∏–Ω–æ–ª–∞—Äüî•\n\n"
            "–¢”©–º–µ–Ω–Ω–µ–Ω —Ç–∞“£–¥–∞ ‚§µÔ∏è"
        )
        send_message(chat_id, welcome, buttons)
        return "ok"

    # –¢—ñ—Ä–∫–µ–ª—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
    if "–¢–Ü–†–ö–ï–õ–£" in text:
        send_message(chat_id, 'üì∫ <b>–ë—ñ–∑–¥—ñ“£ –∞—Ä–Ω–∞“ì–∞ “õ–æ—Å—ã–ª:</b>\nüëâ <a href="https://t.me/+3gQIXD-xl1Q0YzY6">Qazaqsha Films</a>')
        return "ok"

    # –ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω –∫–∏–Ω–æ
    if "–ñ–∞“£–∞–¥–∞–Ω —à—ã“õ“õ–∞–Ω" in text:
        latest = "\n\n".join(CHANNEL_POSTS[-5:]) if CHANNEL_POSTS else "”ò–∑—ñ—Ä–≥–µ –∂–∞“£–∞ –∫–∏–Ω–æ –∂–æ“õ üòÖ"
        send_message(chat_id, f"üÜï <b>–°–æ“£“ì—ã –∫–∏–Ω–æ–ª–∞—Ä:</b>\n\n{latest}")
        return "ok"

    # –ö–∏–Ω–æ —ñ–∑–¥–µ—É
    if "–ö–∏–Ω–æ —ñ–∑–¥–µ—É" in text:
        send_message(chat_id, "üîç “ö–∞–π –∫–∏–Ω–æ–¥—ã —ñ–∑–¥–µ–π—Å—ñ“£? –ê—Ç—ã–Ω –∂–∞–∑ üëá")
        return "ok"

    # “∞—Å—ã–Ω—ã—Å
    if "“õ–∞–Ω–¥–∞–π –∫–∏–Ω–æ “±—Å—ã–Ω–∞—Å—ã–Ω" in text.lower():
        send_message(chat_id, "üé≠ “ö–∞–π –∂–∞–Ω—Ä “±–Ω–∞–π–¥—ã? (–º—ã—Å–∞–ª—ã: –¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è, —ç–∫—à–Ω —Ç.–±.)")
        return "ok"

    # –ö–∏–Ω–æ –∞—Ç–∞—É—ã –∂–∞–∑—ã–ª“ì–∞–Ω –∫–µ–∑–¥–µ
    found_movies = [m for m in CHANNEL_POSTS if text.lower() in m.lower()]
    if found_movies:
        movie_list = "\n\n".join([f"üé¨ <b>{m}</b>" for m in found_movies[:5]])
        send_message(chat_id, f"üîé –¢–∞–±—ã–ª“ì–∞–Ω –∫–∏–Ω–æ–ª–∞—Ä:\n\n{movie_list}")
        return "ok"
    else:
        gemini_reply = ask_gemini(f"'{text}' —Ñ–∏–ª—å–º—ñ “õ–∞–∑–∞“õ—à–∞ –∫–∞–Ω–∞–ª–¥–∞—Ä–¥–∞ –±–∞—Ä –º–∞ –Ω–µ–º–µ—Å–µ —Å–æ“ì–∞–Ω “±“õ—Å–∞—Å “õ–∞–Ω–¥–∞–π —Ñ–∏–ª—å–º –±–∞—Ä?")
        send_message(chat_id, f"üéû {gemini_reply}")
        return "ok"

# =========================================================
@app.route("/")
def home():
    return "üé¨ Qazaqsha Films –±–æ—Ç –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä ‚úÖ"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)